#!/bin/sh

TMP_LOG_SIZE=1024  # 1M
DATA_LOG_SIZE_MAX=2048
LOGGEN=18
TMP_LOG=/var/log/messages
LOG=/data/log/messages

data_log_check_size() {
    i=$LOGGEN
    while [ $i -gt 0 ]; do
        sz=$(du -k "/data/log/" | cut -f 1)
        if [ $sz -gt $DATA_LOG_SIZE_MAX ]; then
            echo "rm $LOG.$i.gz"
            rm $LOG.$i.gz
        else
            echo "not oversize of $DATA_LOG_SIZE_MAX k"
            break;
        fi
        i=$(($i-1))
    done
}

rotate_exist_log() {
    i=$LOGGEN
    rm -f $LOG.$i.gz 2>/dev/null
    while [ $i -gt 0 ]; do
	# rotate one step
	newer=$(($i-1))
	# check if we need to compress
	if [ -f $LOG.$newer.gz ]; then
		# already compressed - just rotate
		mv $LOG.$newer.gz $LOG.$i.gz
	elif [ -f $LOG.$newer ]; then
		# need to compress
		mv $LOG.$newer $LOG.$i
		gzip $LOG.$i
	fi
	# next do the previous generation
	i=$(($i-1))
    done
}

rotate_memory_log() {
    gzip -c $TMP_LOG > $LOG.0.gz
    echo "" > $TMP_LOG
}

do_rotate() {
    rotate_exist_log
    rotate_memory_log
    data_log_check_size
    logger -t logcut -p 1 "Rotate syslog"
}

mkdir -p /data/log
case "$1" in
    size)
	sz=$(du -k "$TMP_LOG" | cut -f 1)
	if [ $sz -gt $TMP_LOG_SIZE ]; then
	    do_rotate
	fi
    ;;
    *)
	do_rotate
    ;;
esac