#!/bin/sh /etc/rc.common
# Copyright (C) 2007-2012 OpenWrt.org

START=62

USE_PROCD=1
PROG=/usr/sbin/dnsmasq

DNS_SERVERS=""
DOMAIN=""

ADD_LOCAL_DOMAIN=1
ADD_LOCAL_HOSTNAME=1

CONFIGFILE="/var/etc/dnsmasq.conf"
HOSTFILE="/tmp/hosts/dhcp"
TRUSTANCHORSFILE="/usr/share/dnsmasq/trust-anchors.conf"
TIMESTAMPFILE="/data/dnsmasq.time"
DEFAULT_TIMEOUT=20
MODEL=`micocfg_model | tr '[a-z]' '[A-Z]'`

LOG_TITLE=$0

mico_log()
{
    logger -t $LOG_TITLE[$$] -p 3 "$*"
}

service_triggers()
{
	procd_add_reload_trigger "dhcp"
}

boot() {
	# Will be launched through hotplug
	return 0
}

start_service() {

	[ x"bluetooth" == x`micocfg_work_mode` ] && {
        logger -t dnsmasq.init.d -p 3  "in bluetooth mode, will not start"
        return
    }

	include /lib/functions

	config_load dhcp

    CUR_CONFIGFILE="/etc/dnsmasq.conf.sta"
    [ $(micocfg_wireless_mode) != "STA" -a $(micocfg_ap_run) == "true" ] && {
        CUR_CONFIGFILE="/etc/dnsmasq.conf.ap"
    }

    mico_log "not config done, use $CUR_CONFIGFILE"

	# enable xiaomi_dns_server
	mkdir -p /tmp/dnsmasq.d/
	[ "$(micocfg_get /usr/share/mico/miio.cfg http_dns_support)" == "yes" ] && {
		cp /usr/share/mico/xiaomi_dns_server.conf /tmp/dnsmasq.d/
	}

	procd_open_instance
	procd_set_param command $PROG -C $CUR_CONFIGFILE -k -x /var/run/dnsmasq/dnsmasq.pid
	procd_set_param file $CUR_CONFIGFILE
	procd_set_param respawn

	procd_add_jail dnsmasq ubus log
	procd_add_jail_mount $CONFIGFILE $TRUSTANCHORSFILE $HOSTFILE /etc/passwd /etc/group /etc/TZ /dev/null /dev/urandom /etc/dnsmasq.conf /tmp/dnsmasq.d /tmp/resolv.conf.auto /etc/hosts /etc/ethers
	procd_add_jail_mount_rw /var/run/dnsmasq/ /tmp/dhcp.leases $TIMESTAMPFILE
	
	procd_close_instance

	# before we can call xappend
	mkdir -p /var/run/dnsmasq/
	mkdir -p $(dirname $CONFIGFILE)
	mkdir -p /var/lib/misc
	touch /tmp/dhcp.leases
    mkdir -p /tmp/hosts /tmp/dnsmasq.d

	if [ ! -f "$TIMESTAMPFILE" ]; then
		touch "$TIMESTAMPFILE"
		chown nobody.nogroup "$TIMESTAMPFILE"
	fi

    
	rm -f /tmp/resolv.conf
	[ $ADD_LOCAL_DOMAIN -eq 1 ] && [ -n "$DOMAIN" ] && {
		echo "search $DOMAIN" >> /tmp/resolv.conf
	}
	DNS_SERVERS="$DNS_SERVERS 127.0.0.1"
	for DNS_SERVER in $DNS_SERVERS ; do
		echo "nameserver $DNS_SERVER" >> /tmp/resolv.conf
	done
	[ x"$MODEL" == x"LX05" -o x"$MODEL" == x"LX05A" -o x"$MODEL" == x"LX01" -o x"$MODEL" == x"L07A" ] && {
		echo "options timeout:$DEFAULT_TIMEOUT" >> /tmp/resolv.conf
	}
}

reload_service() {
	rc_procd start_service "$@"
	return 0
}

stop_service() {
	[ -f /tmp/resolv.conf ] && {
		rm -f /tmp/resolv.conf
		ln -s /tmp/resolv.conf.auto /tmp/resolv.conf
	}
	rm -f /var/run/dnsmasq.*.dhcp
}
